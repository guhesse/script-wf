import { Injectable, Logger } from '@nestjs/common';
import { chromium } from 'playwright';
import { promises as fs } from 'fs';
import { join } from 'path';
import {
  LoginResponseDto,
  LoginStatusDto,
  SessionInfoDto,
  ClearSessionResponseDto,
  SessionValidationDto,
  SessionStatsDto,
} from './dto/auth.dto';

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);
  private readonly STATE_FILE = 'wf_state.json';

  /**
   * Fazer login no Workfront
   */
  async login(): Promise<LoginResponseDto> {
    try {
      this.logger.log('üîë Iniciando processo de login no Workfront...');

      // Implementar login diretamente com Playwright
      await this.performWorkfrontLogin();

      this.logger.log('‚úÖ Login conclu√≠do com sucesso');

      // Verificar se o arquivo de estado foi criado
      const isLoggedIn = await this.checkLoginStatus();

      if (!isLoggedIn.loggedIn) {
        throw new Error('Login aparentemente falhou - arquivo de estado n√£o encontrado');
      }

      return {
        success: true,
        message: 'Login realizado com sucesso! Sess√£o salva.',
        sessionFile: this.STATE_FILE,
        loginTime: isLoggedIn.lastLogin,
      };
    } catch (error) {
      this.logger.error('‚ùå Erro durante login:', error.message);
      throw new Error(`Falha no login: ${error.message}`);
    }
  }

  /**
   * Realizar login no Workfront usando Playwright
   */
  private async performWorkfrontLogin(): Promise<void> {
    this.logger.log('üîê === FAZENDO LOGIN NO WORKFRONT ===');

    const browser = await chromium.launch({
      headless: false,
      args: ['--start-maximized'],
    });

    try {
      const context = await browser.newContext({
        viewport: null,
      });

      const page = await context.newPage();

      this.logger.log('üåç Abrindo Experience Cloud...');
      await page.goto('https://experience.adobe.com/', { waitUntil: 'domcontentloaded' });

      this.logger.log('üë§ Complete o login SSO/MFA. Aguardando at√© 90s ou fechamento manual...');

      // Aguardar com checagem peri√≥dica se o contexto foi fechado
      const maxWait = 90000;
      const interval = 3000;
      let waited = 0;
      while (waited < maxWait) {
        if (page.isClosed()) {
          this.logger.warn('‚ö†Ô∏è P√°gina fechada antes do tempo. Tentando salvar estado assim mesmo.');
          break;
        }
        await page.waitForTimeout(interval);
        waited += interval;
      }

      // Salvar estado da sess√£o
      await context.storageState({ path: this.STATE_FILE });
      this.logger.log(`‚úÖ Sess√£o salva em ${this.STATE_FILE}`);
    } catch (e: any) {
      this.logger.error('Erro durante login interativo', e.message);
      throw e;
    } finally {
      if (browser.isConnected()) {
        await browser.close();
      }
    }
  }

  /**
   * Verificar status do login
   */
  async checkLoginStatus(): Promise<LoginStatusDto> {
    try {
      // Verificar se arquivo de sess√£o existe
      await fs.access(this.STATE_FILE);

      // Obter informa√ß√µes do arquivo
      const stats = await fs.stat(this.STATE_FILE);
      const now = new Date();
      const fileAge = now.getTime() - stats.mtime.getTime();
      const hoursAge = fileAge / (1000 * 60 * 60);

      // Considerar v√°lido se o arquivo foi criado nas √∫ltimas 8 horas
      const isValid = hoursAge < 8;

      return {
        loggedIn: isValid,
        lastLogin: stats.mtime.toISOString(),
        hoursAge: Math.round(hoursAge * 10) / 10,
        sessionFile: this.STATE_FILE,
        fileSize: stats.size,
      };
    } catch (error) {
      return {
        loggedIn: false,
        error: 'Arquivo de sess√£o n√£o encontrado ou inacess√≠vel',
        sessionFile: this.STATE_FILE,
      };
    }
  }

  /**
   * Verificar se precisa fazer login
   */
  async requiresLogin(): Promise<boolean> {
    const status = await this.checkLoginStatus();
    return !status.loggedIn;
  }

  /**
   * Obter informa√ß√µes da sess√£o
   */
  async getSessionInfo(): Promise<SessionInfoDto> {
    try {
      const status = await this.checkLoginStatus();

      if (!status.loggedIn) {
        return {
          hasSession: false,
          message: 'Nenhuma sess√£o ativa encontrada',
        };
      }

      // Tentar ler conte√∫do do arquivo de sess√£o (cuidado com dados sens√≠veis)
      const sessionContent = await fs.readFile(this.STATE_FILE, 'utf8');
      const sessionData = JSON.parse(sessionContent);

      // Retornar apenas informa√ß√µes n√£o sens√≠veis
      return {
        hasSession: true,
        lastLogin: status.lastLogin,
        hoursAge: status.hoursAge,
        hasStorageState: !!sessionData.storageState,
        hasCookies: Array.isArray(sessionData.cookies) ? sessionData.cookies.length : 0,
        domain: this.extractDomainFromSession(sessionData),
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter informa√ß√µes da sess√£o:', error.message);
      return {
        hasSession: false,
        error: 'Erro ao ler arquivo de sess√£o',
      };
    }
  }

  /**
   * Limpar cache e sess√£o
   */
  async clearSession(): Promise<ClearSessionResponseDto> {
    try {
      this.logger.log('üßπ Limpando sess√£o do Workfront...');

      await fs.unlink(this.STATE_FILE);

      this.logger.log('‚úÖ Sess√£o limpa com sucesso');
      return {
        success: true,
        message: 'Sess√£o limpa com sucesso. Fa√ßa login novamente.',
        clearedFile: this.STATE_FILE,
      };
    } catch (error: any) {
      // Se o arquivo n√£o existir, considerar sucesso
      if (error.code === 'ENOENT') {
        this.logger.log('‚ÑπÔ∏è Sess√£o j√° estava limpa (arquivo n√£o encontrado)');
        return {
          success: true,
          message: 'Sess√£o j√° estava limpa.',
          clearedFile: this.STATE_FILE,
        };
      } else {
        this.logger.error('‚ùå Erro ao limpar sess√£o:', error.message);
        throw new Error(`Falha ao limpar sess√£o: ${error.message}`);
      }
    }
  }

  /**
   * Validar sess√£o fazendo uma verifica√ß√£o b√°sica
   */
  async validateSession(): Promise<SessionValidationDto> {
    try {
      const status = await this.checkLoginStatus();

      if (!status.loggedIn) {
        return {
          valid: false,
          reason: 'Nenhuma sess√£o ativa',
        };
      }

      // Verificar se arquivo de sess√£o tem conte√∫do v√°lido
      const sessionContent = await fs.readFile(this.STATE_FILE, 'utf8');
      const sessionData = JSON.parse(sessionContent);

      if (!sessionData.storageState) {
        return {
          valid: false,
          reason: 'Dados de sess√£o inv√°lidos',
        };
      }

      return {
        valid: true,
        lastLogin: status.lastLogin,
        hoursAge: status.hoursAge,
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erro ao validar sess√£o:', error.message);
      return {
        valid: false,
        reason: 'Erro ao validar sess√£o',
        error: error.message,
      };
    }
  }

  /**
   * Obter estat√≠sticas de uso da sess√£o
   */
  async getSessionStats(): Promise<SessionStatsDto> {
    try {
      const status = await this.checkLoginStatus();

      if (!status.loggedIn) {
        return {
          hasStats: false,
          message: 'Nenhuma sess√£o ativa',
        };
      }

      return {
        hasStats: true,
        sessionAge: {
          hours: status.hoursAge!,
          days: Math.round((status.hoursAge! / 24) * 10) / 10,
        },
        sessionSize: status.fileSize,
        lastAccess: status.lastLogin,
        expiresIn: Math.max(0, 8 - status.hoursAge!), // 8 horas de validade
        isExpiringSoon: status.hoursAge! > 6, // Aviso se expira em menos de 2 horas
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erro ao obter estat√≠sticas da sess√£o:', error.message);
      return {
        hasStats: false,
        error: error.message,
      };
    }
  }

  /**
   * Extrair dom√≠nio da sess√£o (utilit√°rio)
   */
  private extractDomainFromSession(sessionData: any): string {
    try {
      if (sessionData.cookies && Array.isArray(sessionData.cookies)) {
        const domains = sessionData.cookies
          .map((cookie: any) => cookie.domain)
          .filter((domain: string) => domain)
          .filter((domain: string, index: number, arr: string[]) => arr.indexOf(domain) === index); // unique

        return domains.join(', ');
      }
      return 'Desconhecido';
    } catch (error) {
      return 'Erro ao extrair';
    }
  }
}