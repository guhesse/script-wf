// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================
// Autenticação & Autorização
// =============================

/// Perfis / papéis de acesso do sistema
enum Role {
  ADMIN // Acesso total
  EDITOR // Pode criar/atualizar recursos (masters, briefings)
  VIEWER // Acesso somente leitura
}

/// Status de aprovação de usuários
enum UserStatus {
  PENDING // Aguardando aprovação de um ADMIN
  ACTIVE // Aprovado e pode autenticar / usar sistema
  REJECTED // Reprovado / bloqueado
}

/// Usuários da aplicação
model User {
  id           String     @id @default(cuid())
  name         String
  email        String     @unique
  passwordHash String
  roles        Role[]     @default([VIEWER]) // Um usuário pode ter múltiplos papéis
  status       UserStatus @default(PENDING)
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@index([email])
  @@map("users")
}

// Modelo para armazenar o histórico de links/projetos do Workfront
model WorkfrontProject {
  id          String     @id @default(cuid())
  url         String     @unique
  title       String?
  description String?
  projectId   String? // ID do projeto no Workfront
  dsid        String? // DSID extraído do nome do projeto
  status      LinkStatus @default(ACTIVE)
  accessedAt  DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamento com sessões de acesso
  accessSessions AccessSession[]

  // Relacionamento com downloads de briefing
  briefingDownloads BriefingDownload[]

  @@map("workfront_projects")
}

// Modelo para rastrear sessões de acesso aos projetos
model AccessSession {
  id         String   @id @default(cuid())
  projectId  String
  userAgent  String?
  ipAddress  String?
  accessedAt DateTime @default(now())

  // Relacionamento com o projeto
  project WorkfrontProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("access_sessions")
}

// Modelo para armazenar downloads de briefings processados
model BriefingDownload {
  id          String         @id @default(cuid())
  projectId   String
  projectName String
  dsid        String?
  totalFiles  Int            @default(0)
  totalSize   BigInt         @default(0)
  status      DownloadStatus @default(PROCESSING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relacionamento com o projeto Workfront
  project WorkfrontProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relacionamento com arquivos PDF processados
  pdfFiles PdfFile[]

  @@map("briefing_downloads")
}

// Modelo para arquivos PDF processados (conteúdo apenas, sem arquivo físico)
model PdfFile {
  id               String   @id @default(cuid())
  downloadId       String
  originalFileName String
  originalUrl      String? // URL original de onde o PDF foi baixado
  fileSize         BigInt   @default(0)
  pageCount        Int      @default(0)
  hasContent       Boolean  @default(false)
  hasComments      Boolean  @default(false)
  processedAt      DateTime @default(now())
  createdAt        DateTime @default(now())

  // Relacionamento com o download
  download BriefingDownload @relation(fields: [downloadId], references: [id], onDelete: Cascade)

  // Relacionamento com conteúdo extraído
  extractedContent PdfExtractedContent?

  // Relacionamento com dados estruturados
  structuredData PdfStructuredData?

  @@map("pdf_files")
}

// Modelo para conteúdo extraído dos PDFs
model PdfExtractedContent {
  id        String  @id @default(cuid())
  pdfFileId String  @unique
  fullText  String? @db.Text

  // Comentários agrupados por autor
  comments Json? // Armazena comentários estruturados por autor

  // Links extraídos
  links String[] // Array de links encontrados

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com o arquivo PDF
  pdfFile PdfFile @relation(fields: [pdfFileId], references: [id], onDelete: Cascade)

  @@map("pdf_extracted_content")
}

// Modelo para dados estruturados extraídos dos PDFs
model PdfStructuredData {
  id        String @id @default(cuid())
  pdfFileId String @unique

  // Campos estruturados extraídos dos comentários
  liveDate        String?
  vf              String? // Visual Framework
  headline        String?
  copy            String? @db.Text
  description     String? @db.Text
  cta             String?
  copyColor       String?
  backgroundColor String?
  postcopy        String? @db.Text
  urn             String?
  allocadia       String?
  formats         Json? // Formatos de assets (solicitados e existentes)

  // Metadados
  extractedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com o arquivo PDF
  pdfFile PdfFile @relation(fields: [pdfFileId], references: [id], onDelete: Cascade)

  @@map("pdf_structured_data")
}

// Enum para status dos projetos
enum LinkStatus {
  ACTIVE
  ARCHIVED
  EXPIRED
  ERROR
}

// Enum para status dos downloads
enum DownloadStatus {
  PROCESSING
  COMPLETED
  FAILED
  PARTIAL
}

// =============================
// Masters (Arquivos principais)
// =============================

/// Tipo de arquivo master (extensão/base)
enum MasterFileType {
  PSD
  AI
  AE
  HTML
  PDF
  JPG
  PNG
  MP4
  OTHER
}

/// Tipo de editável (como será reutilizado)
enum MasterEditableType {
  STATIC
  WIREFRAME
  ANIMATED
  HTML
  VIDEO
  TEMPLATE
  DOCUMENT
  OTHER
}

/// Registro de master assets armazenados no Bunny CDN
model MasterAsset {
  id              String             @id @default(cuid())
  title           String
  brand           String? // Nome da marca
  description     String?
  fileName        String // Nome do arquivo original
  fileType        MasterFileType // Tipo do arquivo (PSD, AI, etc)
  editableType    MasterEditableType // Classificação de uso
  fileSize        BigInt // Em bytes
  frameCount      Int? // Quantidade de frames (se aplicável - animações / vídeos)
  width           Int? // Largura em px (quando aplicável)
  height          Int? // Altura em px (quando aplicável)
  aspectRatio     String? // Ex: 16:9, 1:1
  checksum        String?            @unique // Hash (MD5/SHA1) p/ deduplicação
  bunnyPath       String // Caminho relativo na storage do Bunny
  bunnyCdnUrl     String // URL CDN pública
  previewImageUrl String? // Miniatura gerada (armazenada também no Bunny)
  tags            String[] // Tags livres
  version         Int                @default(1)
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  archivedAt      DateTime?

  // Índices auxiliares
  @@index([brand])
  @@index([fileType])
  @@index([editableType])
  @@index([isActive])
  @@index([createdAt])
  @@map("master_assets")
}

// =============================
// Uploads Temporários
// =============================

/// Registro de uploads temporários no Bunny CDN (para limpeza automática)
model TempUpload {
  id          String    @id // ID único do upload
  storagePath String    @unique // Caminho no Bunny Storage
  cdnUrl      String    // URL do CDN
  fileName    String    // Nome original do arquivo
  fileSize    BigInt?   // Tamanho em bytes (opcional)
  userId      String?   // ID do usuário que fez upload (opcional)
  projectUrl  String?   // URL do projeto relacionado (opcional)
  isUsed      Boolean   @default(false) // Se o arquivo já foi utilizado
  createdAt   DateTime  @default(now())
  expiresAt   DateTime  // Data de expiração para limpeza
  deletedAt   DateTime? // Quando foi deletado (soft delete)

  @@index([expiresAt])
  @@index([isUsed])
  @@index([createdAt])
  @@map("temp_uploads")
}

// =============================
// Kanban Board
// =============================

/// Status do card no Kanban
enum KanbanStatus {
  BACKLOG
  FILES_TO_STUDIO
  REVISAO_TEXTO
  REVIEW_DELL
  FINAL_MATERIAL
  ASSET_RELEASE
  COMPLETED
}

/// Tipo de Visual Framework
enum VFType {
  NO_VF
  MICROSOFT_JMA_CS
  OTHER
}

/// Tipo de Asset
enum AssetType {
  ESTATICO
  VIDEO
  WIREFRAME
  GIF
  STORY
  MOLDURA
  AW_STORY
  HTML
  OTHER
}

/// Frente de trabalho
enum WorkfrontFrente {
  OOH
  SOCIAL
  EMAIL
  BANNER
}

/// Ano fiscal
enum FiscalYear {
  FY25
  FY26
  FY27
  FY28
}

/// Cards do quadro Kanban baseado no CSV de jobs
model KanbanCard {
  id        String   @id @default(cuid())
  
  // Campos principais do CSV
  bi                Boolean        @default(true)          // B.I - Se está incluído no BI
  round             Int?                                   // Round atual (1-12)
  anotacoes         String?        @db.Text                // ANOTAÇÕES
  start             DateTime?                              // START - Data de início
  realDeliv         DateTime?                              // REAL DELIV. - Entrega real
  prevDeliv         DateTime?                              // PREV DELIV. - Previsão de entrega
  dsid              String?                                // DSID - ID do projeto
  atividade         String                                 // ATIVIDADE - Nome/descrição da task
  status            KanbanStatus   @default(BACKLOG)       // STATUS
  studio            String?                                // STUDIO - Nome do estúdio/designer
  vf                VFType?        @default(NO_VF)         // VF - Visual Framework
  tipoAsset         AssetType      @default(OTHER)         // T. DE ASSET
  numeroAssets      Int            @default(1)             // N. DE ASSETS
  cliente           String?                                // CLIENTE
  brand             String?                                // BRAND
  week              String?                                // WEEK (ex: W1, W3, W7)
  quarter           String?                                // QUARTER (ex: Q3)
  frente            WorkfrontFrente @default(OOH)           // FRENTE
  fy                FiscalYear?                            // FY
  
  // Datas de entregas e feedbacks (R1 a R4)
  entregaR1VML      DateTime?                              // ENTREGA R1 VML
  feedbackR1Dell    DateTime?                              // FEEDBACK R1 DELL
  entregaR2VML      DateTime?                              // ENTREGA R2 VML
  feedbackR2Dell    DateTime?                              // FEEDBACK R2 DELL
  entregaR3VML      DateTime?                              // ENTREGA R3 VML
  feedbackR3Dell    DateTime?                              // FEEDBACK R3 DELL
  entregaR4VML      DateTime?                              // ENTREGA R4 VML
  feedbackR4Dell    DateTime?                              // FEEDBACK R4 DELL
  
  // Dias calculados entre etapas
  diasStartR1VML    Int?                                   // START ATÉ R1 VML
  diasR1VMLR1Dell   Int?                                   // R1 VML ATÉ R1 DELL
  diasR1DellR2VML   Int?                                   // R1 DELL ATÉ R2 VML
  diasR2VMLR2Dell   Int?                                   // R2 VML ATÉ R2 DELL
  diasR2DellR3VML   Int?                                   // R2 DELL ATÉ R3 VML
  diasR3VMLR3Dell   Int?                                   // R3 VML ATÉ R3 DELL
  diasR3DellR4VML   Int?                                   // R3 DELL ATÉ R4 VML
  diasR4VMLR4Dell   Int?                                   // R4 VML ATÉ R4 DELL
  
  // Percentuais de tempo
  diasNaVMLPercent  Float?                                 // DIAS NA VML(%)
  diasNaDellPercent Float?                                 // DIAS NA DELL(%)
  
  // Posição no board (para drag-and-drop)
  position          Int            @default(0)
  columnId          String?                                // ID da coluna onde está o card
  
  // Auditoria
  createdBy         String?                                // ID do usuário que criou
  updatedBy         String?                                // ID do último usuário que editou
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  
  @@index([status])
  @@index([week])
  @@index([quarter])
  @@index([fy])
  @@index([cliente])
  @@index([brand])
  @@index([frente])
  @@index([columnId])
  @@index([createdAt])
  @@map("kanban_cards")
}
