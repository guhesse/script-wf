services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_DEV_USER:-scriptwfdev}
      POSTGRES_PASSWORD: ${POSTGRES_DEV_PASSWORD:-AJDO2r7bOcCCKb0Z1Rjw0nq!}
      POSTGRES_DB: ${POSTGRES_DEV_DB:-scriptwf_dev}
    ports:
      - "5432:5432"
    volumes:
      - pgdata_dev:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 6

  pgadmin:
    image: dpage/pgadmin4:8.8
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-7zUL9y8LTTTQ2m23Zt!}
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
      # IMPORTANTE: Variáveis PGADMIN_CONFIG_* são inseridas diretamente no config Python.
      # Por isso precisamos incluir aspas dentro da string para gerar código Python válido.
      PGADMIN_CONFIG_LOGIN_BANNER: '"ACESSO RESTRITO. USO MONITORADO."'
    ports:
      - "8081:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - db

volumes:
  pgdata_dev:
  pgadmin_data:

# Uso:
# docker compose -f docker-compose.multi-db.yml up -d
# Acessar PGAdmin: http://localhost:8081
# Adicionar servidor:
#   Dev: host=db port=5432 user=POSTGRES_DEV_USER db=POSTGRES_DEV_DB
