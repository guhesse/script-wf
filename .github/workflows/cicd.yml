name: CI/CD

on:
  push:
    branches: [ prod, dev ]
  pull_request:
    branches: [ prod ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAMESPACE: ${{ github.repository_owner }}/script-wf
  # Nome simplificado da branch (prod ou dev)
  BRANCH_NAME: ${{ github.ref_name }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node (backend)
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'
          cache-dependency-path: |
            backend/package-lock.json
            frontend/package-lock.json

      - name: Install backend deps
        working-directory: backend
        run: |
          npm ci
          npm run build
          npx prisma generate

      - name: Install frontend deps
        working-directory: frontend
        run: |
          npm ci
          npm run build

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (backend)
        id: meta_backend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-backend
          tags: |
            # latest só para prod
            type=raw,value=latest,enable=${{ env.BRANCH_NAME == 'prod' }}
            # dev-latest só para dev
            type=raw,value=dev-latest,enable=${{ env.BRANCH_NAME == 'dev' }}
            # Tag com nome da branch (prod ou dev)
            type=ref,event=branch
            # Tag com SHA curto
            type=sha

      - name: Extract metadata (frontend)
        id: meta_frontend
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAMESPACE }}-frontend
          tags: |
            type=raw,value=latest,enable=${{ env.BRANCH_NAME == 'prod' }}
            type=raw,value=dev-latest,enable=${{ env.BRANCH_NAME == 'dev' }}
            type=ref,event=branch
            type=sha

      - name: Build & Push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/backend.Dockerfile
          push: true
          tags: ${{ steps.meta_backend.outputs.tags }}
          labels: ${{ steps.meta_backend.outputs.labels }}

      - name: Build & Push frontend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: docker/frontend.Dockerfile
          push: true
          tags: ${{ steps.meta_frontend.outputs.tags }}
          labels: ${{ steps.meta_frontend.outputs.labels }}

      - name: Summary
        run: |
          echo "Branch: $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          echo "Backend Tags:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta_backend.outputs.tags }}" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY
          echo "Frontend Tags:" >> $GITHUB_STEP_SUMMARY
          echo "${{ steps.meta_frontend.outputs.tags }}" | tr ' ' '\n' >> $GITHUB_STEP_SUMMARY

  deploy-vps:
    needs: build-and-push
    runs-on: ubuntu-latest
    # Executa somente para a branch prod (antiga main)
    if: github.ref_name == 'prod'
    steps:
      - name: Deploy via SSH (pull new images and up)
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /var/www/script-wf || exit 1
            echo "Atualizando imagens..."
            # Puxa a tag correta (latest só existe em prod; fallback para tag da branch)
            if docker pull ghcr.io/${{ github.repository_owner }}/script-wf-backend:latest 2>/dev/null; then
              echo "Backend latest puxada"
            else
              docker pull ghcr.io/${{ github.repository_owner }}/script-wf-backend:prod || true
            fi
            if docker pull ghcr.io/${{ github.repository_owner }}/script-wf-frontend:latest 2>/dev/null; then
              echo "Frontend latest puxada"
            else
              docker pull ghcr.io/${{ github.repository_owner }}/script-wf-frontend:prod || true
            fi
            echo "Recriando stack..."
            docker compose -f docker-compose.prod.yml --env-file .env up -d
            echo "Aplicando migrações Prisma..."
            docker compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy
            echo "OK"
