// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DBLINK")
}

// Modelo para armazenar o histórico de links/projetos do Workfront
model WorkfrontProject {
  id          String     @id @default(cuid())
  url         String     @unique
  title       String?
  description String?
  projectId   String? // ID do projeto no Workfront
  dsid        String? // DSID extraído do nome do projeto
  status      LinkStatus @default(ACTIVE)
  accessedAt  DateTime   @default(now())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relacionamento com sessões de acesso
  accessSessions AccessSession[]

  // Relacionamento com downloads de briefing
  briefingDownloads BriefingDownload[]

  @@map("workfront_projects")
}

// Modelo para rastrear sessões de acesso aos projetos
model AccessSession {
  id         String   @id @default(cuid())
  projectId  String
  userAgent  String?
  ipAddress  String?
  accessedAt DateTime @default(now())

  // Relacionamento com o projeto
  project WorkfrontProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("access_sessions")
}

// Modelo para armazenar downloads de briefings processados
model BriefingDownload {
  id          String         @id @default(cuid())
  projectId   String
  projectName String
  dsid        String?
  totalFiles  Int            @default(0)
  totalSize   BigInt         @default(0)
  status      DownloadStatus @default(PROCESSING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relacionamento com o projeto Workfront
  project WorkfrontProject @relation(fields: [projectId], references: [id], onDelete: Cascade)

  // Relacionamento com arquivos PDF processados
  pdfFiles PdfFile[]

  @@map("briefing_downloads")
}

// Modelo para arquivos PDF processados (conteúdo apenas, sem arquivo físico)
model PdfFile {
  id               String   @id @default(cuid())
  downloadId       String
  originalFileName String
  originalUrl      String? // URL original de onde o PDF foi baixado
  fileSize         BigInt   @default(0)
  pageCount        Int      @default(0)
  hasContent       Boolean  @default(false)
  hasComments      Boolean  @default(false)
  processedAt      DateTime @default(now())
  createdAt        DateTime @default(now())

  // Relacionamento com o download
  download BriefingDownload @relation(fields: [downloadId], references: [id], onDelete: Cascade)

  // Relacionamento com conteúdo extraído
  extractedContent PdfExtractedContent?

  // Relacionamento com dados estruturados
  structuredData PdfStructuredData?

  @@map("pdf_files")
}

// Modelo para conteúdo extraído dos PDFs
model PdfExtractedContent {
  id        String  @id @default(cuid())
  pdfFileId String  @unique
  fullText  String? @db.Text

  // Comentários agrupados por autor
  comments Json? // Armazena comentários estruturados por autor

  // Links extraídos
  links String[] // Array de links encontrados

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamento com o arquivo PDF
  pdfFile PdfFile @relation(fields: [pdfFileId], references: [id], onDelete: Cascade)

  @@map("pdf_extracted_content")
}

// Modelo para dados estruturados extraídos dos PDFs
model PdfStructuredData {
  id        String @id @default(cuid())
  pdfFileId String @unique

  // Campos estruturados extraídos dos comentários
  liveDate        String?
  vf              String? // Visual Framework
  headline        String?
  copy            String? @db.Text
  description     String? @db.Text
  cta             String?
  copyColor       String?
  backgroundColor String?
  postcopy        String? @db.Text
  urn             String?
  allocadia       String?
  formats         Json? // Formatos de assets (solicitados e existentes)

  // Metadados
  extractedAt DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamento com o arquivo PDF
  pdfFile PdfFile @relation(fields: [pdfFileId], references: [id], onDelete: Cascade)

  @@map("pdf_structured_data")
}

// Enum para status dos projetos
enum LinkStatus {
  ACTIVE
  ARCHIVED
  EXPIRED
  ERROR
}

// Enum para status dos downloads
enum DownloadStatus {
  PROCESSING
  COMPLETED
  FAILED
  PARTIAL
}
