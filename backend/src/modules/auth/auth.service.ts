import { Injectable, Logger } from '@nestjs/common';
import { chromium } from 'playwright';
import { LoginProgressService } from './login-progress.service';
import { LoginPhase } from './login-progress.enum';
import { promises as fs } from 'fs';
import { join } from 'path';
import {
  LoginResponseDto,
  LoginStatusDto,
  SessionInfoDto,
  ClearSessionResponseDto,
  SessionValidationDto,
  SessionStatsDto,
} from './dto/auth.dto';

@Injectable()
export class AuthService {
  private readonly logger = new Logger(AuthService.name);
  private readonly STATE_FILE = 'wf_state.json';
  private readonly PARTIAL_FILE = 'wf_state.partial.json';

  /**
   * Fazer login no Workfront
   */
  constructor(private readonly progress: LoginProgressService) {}

  async login(): Promise<LoginResponseDto> {
    try {
      // Se j√° existe state v√°lido, retornar direto
      const status = await this.checkLoginStatus();
      if (status.loggedIn) {
        this.logger.log('‚ö° Sess√£o j√° v√°lida ‚Äî pulando novo login');
        return {
            success: true,
            message: 'Sess√£o existente reutilizada',
            sessionFile: this.STATE_FILE,
            loginTime: status.lastLogin,
        };
      }

      this.logger.log('üîë Iniciando processo de login no Workfront...');
      this.progress.update(LoginPhase.LAUNCHING_BROWSER, 'Lan√ßando navegador');

      // Implementar login diretamente com Playwright
      await this.performWorkfrontLogin();

      this.logger.log('‚úÖ Login conclu√≠do com sucesso');

      // Verificar se o arquivo de estado foi criado
      const isLoggedIn = await this.checkLoginStatus();

      if (!isLoggedIn.loggedIn) {
        throw new Error('Login aparentemente falhou - arquivo de estado n√£o encontrado');
      }

      return {
        success: true,
        message: 'Login realizado com sucesso! Sess√£o salva.',
        sessionFile: this.STATE_FILE,
        loginTime: isLoggedIn.lastLogin,
      };
    } catch (error) {
      this.logger.error('‚ùå Erro durante login:', error.message);
      throw new Error(`Falha no login: ${error.message}`);
    }
  }

  /**
   * Realizar login no Workfront usando Playwright
   */
  private async performWorkfrontLogin(): Promise<void> {
    this.logger.log('üîê === FAZENDO LOGIN NO WORKFRONT ===');
    const browser = await chromium.launch({
      headless: true,
      args: ['--no-sandbox','--disable-dev-shm-usage'],
    });

    try {
      const context = await browser.newContext();

      const page = await context.newPage();

  this.progress.update(LoginPhase.NAVIGATING, 'Abrindo Experience Cloud');
  this.logger.log('üåç Abrindo Experience Cloud...');
      await page.goto('https://experience.adobe.com/', { waitUntil: 'domcontentloaded' });

      this.logger.log('üë§ Complete o login SSO/MFA. Polling do bot√£o "Adobe Experience Cloud" para persistir sess√£o.');

  const TARGET_BUTTON_SELECTOR = process.env.WF_LOGIN_BUTTON_SELECTOR || 'button[aria-label="Adobe Experience Cloud"], button[data-omega-element="Adobe Experience Cloud"]';
  const MAX_TOTAL_MS = parseInt(process.env.WF_LOGIN_MAX_TOTAL_MS || '90000', 10);
  const INITIAL_GRACE_MS = parseInt(process.env.WF_LOGIN_INITIAL_GRACE_MS || '40000', 10);
  const POLL_INTERVAL_MS = parseInt(process.env.WF_LOGIN_POLL_INTERVAL_MS || '3000', 10);
  const MAX_PERSIST_ATTEMPTS = parseInt(process.env.WF_LOGIN_MAX_PERSIST_ATTEMPTS || '15', 10);
      const start = Date.now();
  let persisted = false;
  let persistAttempts = 0;
  const allowMultiple = (process.env.WF_LOGIN_MULTI_PERSIST || '').toLowerCase() === 'true';

      // Fase inicial: aguardar per√≠odo de SSO/MFA sem flood
      while (Date.now() - start < INITIAL_GRACE_MS) {
        if (page.isClosed()) break;
        await page.waitForTimeout(2500);
      }

  this.progress.update(LoginPhase.WAITING_SSO, 'Aguardando autentica√ß√£o SSO/MFA');
  while ((Date.now() - start) < MAX_TOTAL_MS && !page.isClosed()) {
        try {
          const button = await page.$(TARGET_BUTTON_SELECTOR);
          if (button) {
            this.progress.update(LoginPhase.DETECTED_BUTTON, 'Sess√£o autenticada, persistindo');
            this.logger.log('‚úÖ Bot√£o Adobe Experience Cloud detectado ‚Äî sess√£o aparentemente autenticada.');
            // Salva state a cada detec√ß√£o (com limite)
            await context.storageState({ path: this.PARTIAL_FILE });
            persistAttempts++;
            if (!persisted) {
              persisted = true;
              this.logger.log(`üíæ Sess√£o persistida (1¬™ captura parcial) em ${this.PARTIAL_FILE}`);
              if (!allowMultiple) {
                this.logger.log('üõë Encerrando imediatamente ap√≥s primeira persist√™ncia (WF_LOGIN_MULTI_PERSIST != true).');
                break;
              }
            } else if (allowMultiple) {
              this.logger.log(`üíæ Sess√£o parcial atualizada (#${persistAttempts})`);
              if (persistAttempts >= MAX_PERSIST_ATTEMPTS) {
                this.logger.log('üõë Limite de persist√™ncias atingido ‚Äî encerrando browser para liberar usu√°rio.');
                break;
              }
            }
          } else {
            this.logger.verbose('‚åõ Bot√£o ainda n√£o encontrado, continuar√° polling...');
          }
        } catch (e: any) {
          this.logger.warn(`Falha durante polling de login: ${e.message}`);
        }
        await page.waitForTimeout(POLL_INTERVAL_MS);
      }

      if (!persisted) {
        // fallback final: salvar ao menos uma vez antes de fechar
        try {
            await context.storageState({ path: this.PARTIAL_FILE });
            this.logger.log('üíæ Sess√£o salva no fallback final.');
        } catch (e:any) {
            this.logger.warn('N√£o foi poss√≠vel salvar sess√£o no fallback: ' + e.message);
        }
      }

      this.logger.log(`‚úÖ Processo de login conclu√≠do (persisted=${persisted})`);
      if (persisted) {
        this.progress.update(LoginPhase.PERSISTING, 'Validando e gravando state final');
        await this.promotePartialState();
        this.progress.success('Login conclu√≠do');
      } else {
        this.progress.fail('N√£o foi poss√≠vel confirmar a sess√£o');
      }
    } catch (e: any) {
      this.logger.error('Erro durante login interativo', e.message);
      this.progress.fail(e.message);
      throw e;
    } finally {
      if (browser.isConnected()) {
        await browser.close();
      }
    }
  }

  private async promotePartialState() {
    try {
      // Validar conte√∫do b√°sico
      const data = await fs.readFile(this.PARTIAL_FILE, 'utf8');
      const json = JSON.parse(data);
      if (!json.cookies || !Array.isArray(json.cookies) || json.cookies.length === 0) {
        throw new Error('State parcial sem cookies, abortando promo√ß√£o');
      }
      // Renomear at√¥mico
      try { await fs.unlink(this.STATE_FILE); } catch { /* ignore */ }
      await fs.rename(this.PARTIAL_FILE, this.STATE_FILE);
      this.logger.log('üü¢ State final promovido com sucesso.');
    } catch (e:any) {
      this.logger.error('Falha ao promover state parcial:', e.message);
      try { await fs.unlink(this.PARTIAL_FILE); } catch {/* ignore */}
      throw e;
    }
  }

  /**
   * Verificar status do login
   */
  async checkLoginStatus(): Promise<LoginStatusDto> {
    try {
      // Verificar se arquivo de sess√£o existe
      await fs.access(this.STATE_FILE);

      // Obter informa√ß√µes do arquivo
      const stats = await fs.stat(this.STATE_FILE);
      const now = new Date();
      const fileAge = now.getTime() - stats.mtime.getTime();
      const hoursAge = fileAge / (1000 * 60 * 60);

      // Considerar v√°lido se o arquivo foi criado nas √∫ltimas 8 horas
      const isValid = hoursAge < 8;

      return {
        loggedIn: isValid,
        lastLogin: stats.mtime.toISOString(),
        hoursAge: Math.round(hoursAge * 10) / 10,
        sessionFile: this.STATE_FILE,
        fileSize: stats.size,
      };
    } catch (error) {
      return {
        loggedIn: false,
        error: 'Arquivo de sess√£o n√£o encontrado ou inacess√≠vel',
        sessionFile: this.STATE_FILE,
      };
    }
  }

  /**
   * Verificar se precisa fazer login
   */
  async requiresLogin(): Promise<boolean> {
    const status = await this.checkLoginStatus();
    return !status.loggedIn;
  }

  /**
   * Obter informa√ß√µes da sess√£o
   */
  async getSessionInfo(): Promise<SessionInfoDto> {
    try {
      const status = await this.checkLoginStatus();

      if (!status.loggedIn) {
        return {
          hasSession: false,
          message: 'Nenhuma sess√£o ativa encontrada',
        };
      }

      // Tentar ler conte√∫do do arquivo de sess√£o (cuidado com dados sens√≠veis)
      const sessionContent = await fs.readFile(this.STATE_FILE, 'utf8');
      const sessionData = JSON.parse(sessionContent);

      // Retornar apenas informa√ß√µes n√£o sens√≠veis
      return {
        hasSession: true,
        lastLogin: status.lastLogin,
        hoursAge: status.hoursAge,
        hasStorageState: !!sessionData.storageState,
        hasCookies: Array.isArray(sessionData.cookies) ? sessionData.cookies.length : 0,
        domain: this.extractDomainFromSession(sessionData),
      };
    } catch (error) {
      this.logger.error('‚ùå Erro ao obter informa√ß√µes da sess√£o:', error.message);
      return {
        hasSession: false,
        error: 'Erro ao ler arquivo de sess√£o',
      };
    }
  }

  /**
   * Limpar cache e sess√£o
   */
  async clearSession(): Promise<ClearSessionResponseDto> {
    try {
      this.logger.log('üßπ Limpando sess√£o do Workfront...');

      await fs.unlink(this.STATE_FILE);

      this.logger.log('‚úÖ Sess√£o limpa com sucesso');
      return {
        success: true,
        message: 'Sess√£o limpa com sucesso. Fa√ßa login novamente.',
        clearedFile: this.STATE_FILE,
      };
    } catch (error: any) {
      // Se o arquivo n√£o existir, considerar sucesso
      if (error.code === 'ENOENT') {
        this.logger.log('‚ÑπÔ∏è Sess√£o j√° estava limpa (arquivo n√£o encontrado)');
        return {
          success: true,
          message: 'Sess√£o j√° estava limpa.',
          clearedFile: this.STATE_FILE,
        };
      } else {
        this.logger.error('‚ùå Erro ao limpar sess√£o:', error.message);
        throw new Error(`Falha ao limpar sess√£o: ${error.message}`);
      }
    }
  }

  /**
   * Validar sess√£o fazendo uma verifica√ß√£o b√°sica
   */
  async validateSession(): Promise<SessionValidationDto> {
    try {
      const status = await this.checkLoginStatus();

      if (!status.loggedIn) {
        return {
          valid: false,
          reason: 'Nenhuma sess√£o ativa',
        };
      }

      // Verificar se arquivo de sess√£o tem conte√∫do v√°lido
      const sessionContent = await fs.readFile(this.STATE_FILE, 'utf8');
      const sessionData = JSON.parse(sessionContent);

      if (!sessionData.storageState) {
        return {
          valid: false,
          reason: 'Dados de sess√£o inv√°lidos',
        };
      }

      return {
        valid: true,
        lastLogin: status.lastLogin,
        hoursAge: status.hoursAge,
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erro ao validar sess√£o:', error.message);
      return {
        valid: false,
        reason: 'Erro ao validar sess√£o',
        error: error.message,
      };
    }
  }

  /**
   * Obter estat√≠sticas de uso da sess√£o
   */
  async getSessionStats(): Promise<SessionStatsDto> {
    try {
      const status = await this.checkLoginStatus();

      if (!status.loggedIn) {
        return {
          hasStats: false,
          message: 'Nenhuma sess√£o ativa',
        };
      }

      return {
        hasStats: true,
        sessionAge: {
          hours: status.hoursAge!,
          days: Math.round((status.hoursAge! / 24) * 10) / 10,
        },
        sessionSize: status.fileSize,
        lastAccess: status.lastLogin,
        expiresIn: Math.max(0, 8 - status.hoursAge!), // 8 horas de validade
        isExpiringSoon: status.hoursAge! > 6, // Aviso se expira em menos de 2 horas
      };
    } catch (error: any) {
      this.logger.error('‚ùå Erro ao obter estat√≠sticas da sess√£o:', error.message);
      return {
        hasStats: false,
        error: error.message,
      };
    }
  }

  /**
   * Extrair dom√≠nio da sess√£o (utilit√°rio)
   */
  private extractDomainFromSession(sessionData: any): string {
    try {
      if (sessionData.cookies && Array.isArray(sessionData.cookies)) {
        const domains = sessionData.cookies
          .map((cookie: any) => cookie.domain)
          .filter((domain: string) => domain)
          .filter((domain: string, index: number, arr: string[]) => arr.indexOf(domain) === index); // unique

        return domains.join(', ');
      }
      return 'Desconhecido';
    } catch (error) {
      return 'Erro ao extrair';
    }
  }
}